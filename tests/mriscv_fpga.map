
Memory Configuration

Name             Origin             Length             Attributes
FLASH            0x0000000000000000 0x0000000000002000 xr
RAM              0x0000000000010000 0x0000000000001000 xrw
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map


.text           0x0000000000000000      0x5a8
 *(.isr_vector)
 *(.text*)
 .text          0x0000000000000000      0x5a8 add.o
                0x0000000000000000                mytest
 *(.init)
 *(.fini)
 *crtbegin.o(.ctors)
 *crtbegin?.o(.ctors)
 *(EXCLUDE_FILE(*crtend.o *crtend?.o) .ctors)
 *(SORT(.ctors.*))
 *(.ctors)
 *crtbegin.o(.dtors)
 *crtbegin?.o(.dtors)
 *(EXCLUDE_FILE(*crtend.o *crtend?.o) .dtors)
 *(SORT(.dtors.*))
 *(.dtors)
 *(.rodata*)
 *(.eh_frame*)
                0x00000000000005a8                __etext = .

.data           0x0000000000010000        0x0 load address 0x00000000000005a8
                0x0000000000010000                __data_start__ = .
 *(vtable)
 *(.data*)
 .data          0x0000000000010000        0x0 add.o
                0x0000000000010000                . = ALIGN (0x4)
                [!provide]                        PROVIDE (__preinit_array_start, .)
 *(.preinit_array)
                [!provide]                        PROVIDE (__preinit_array_end, .)
                0x0000000000010000                . = ALIGN (0x4)
                [!provide]                        PROVIDE (__init_array_start, .)
 *(SORT(.init_array.*))
 *(.init_array)
                [!provide]                        PROVIDE (__init_array_end, .)
                0x0000000000010000                . = ALIGN (0x4)
                [!provide]                        PROVIDE (__fini_array_start, .)
 *(SORT(.fini_array.*))
 *(.fini_array)
                [!provide]                        PROVIDE (__fini_array_end, .)
 *(.jcr*)
                0x0000000000010000                . = ALIGN (0x4)
                0x0000000000010000                __data_end__ = .

.bss            0x0000000000010000        0x0 load address 0x00000000000005a8
                0x0000000000010000                . = ALIGN (0x4)
                0x0000000000010000                __bss_start__ = .
 *(.bss*)
 .bss           0x0000000000010000        0x0 add.o
 *(COMMON)
                0x0000000000010000                . = ALIGN (0x4)
                0x0000000000010000                __bss_end__ = .

.heap           0x0000000000010000        0x0
                0x0000000000010000                __end__ = .
                [!provide]                        PROVIDE (end, .)
 *(.heap*)
                0x0000000000010000                __HeapLimit = .

.stack_dummy    0x0000000000010000        0x0
 *(.stack*)
                0x0000000000011000                __StackTop = (ORIGIN (RAM) + LENGTH (RAM))
                0x0000000000011000                __StackLimit = (__StackTop - SIZEOF (.stack_dummy))
                [!provide]                        PROVIDE (__stack, __StackTop)
                0x0000000000010fff                __ram_end__ = ((ORIGIN (RAM) + LENGTH (RAM)) - 0x1)
                0x0000000000000001                ASSERT ((__StackLimit >= __HeapLimit), region RAM overflowed with stack)
LOAD add.o
LOAD /opt/riscv32i/bin/../lib/gcc/riscv32-unknown-elf/6.1.0/libgcc.a
OUTPUT(add.elf elf32-littleriscv)
